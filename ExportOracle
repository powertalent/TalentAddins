Dim connection As ADODB.connection
Dim recordSet As ADODB.recordSet
Dim connectString As String, schema As String, user As String, pass As String

Sub GetConnection()
    ' Get DB Information
    schema = Worksheets("OracleExport").range("schemaName").Value
    user = Worksheets("OracleExport").range("userName").Value
    pass = Worksheets("OracleExport").range("password").Value
    ' Create connection String
    connectString = "Provider=OraOLEDB.Oracle.1;Persist Security Info=True" & _
    ";Data Source=127.0.0.1:1521/xe;" & "User ID=" & user & ";Password=" & pass
    ' Init connection
    Set connection = New ADODB.connection
    ' Init recordSet
    Set recordSet = New ADODB.recordSet
    ' Open connect
    connection.Open connectString
End Sub

Sub GetResultCount()
    ' Connect DB
    Call GetConnection
    ' Init & Get Table List
    Dim tableRange As range
    Dim sqlStr As String
    Set tableRange = Worksheets("OracleExport").range("I13:I100")
    ' Dont update screen when export
    Application.ScreenUpdating = False
    ' Export Table
    For Each Table In tableRange.Cells
        ' If Table is Empty then Exit
        If IsEmpty(Table.Value) Or Table.Value = "" Then
            Exit For
        End If
        ' Get Conditon WHERE CLAUSE
        Set Condition = Table.Offset(0, 1)
        ' Get Sort ORDER BY CLAUSE
        Set OrderBy = Condition.Offset(0, 1)
        ' Get resultCount Cell Address
        Set resultCountAddress = OrderBy.Offset(0, 1)
        ' Create SQL
        ' Basic SQL
        sqlStr = "SELECT Count(*) FROM " & Table.Value
        ' have WHERE Condition
        If IsEmpty(Condition.Value) = False Then
           sqlStr = sqlStr & " WHERE " & Condition.Value
        End If
        ' have ORDER BY Condition
        If IsEmpty(OrderBy.Value) = False Then
           sqlStr = sqlStr & " ORDER BY " & OrderBy.Value
        End If
        recordSet.Open sqlStr, connection, adOpenStatic
        ' Setting result Count
        resultCountAddress.Value = recordSet.Fields(0).Value
        recordSet.Close
    Next
    connection.Close
End Sub

Sub ExportData()
    ' Connect DB
    Call GetConnection
    ' Get Export Direction
    Dim opt As Shape
    Dim direction As String
    Set opt = Worksheets("OracleExport").Shapes("Option Button 4")
    If opt.ControlFormat.Value = xlOn Then
        direction = "Vertical"
    Else
        direction = "Horizontal"
    End If
    
    ' Init & Get Table List
    Dim tableRange As range
    Set tableRange = Worksheets("OracleExport").range("I13:I100")
    Dim cel As range
    
    ' Dont update screen when export
    Application.ScreenUpdating = False
    
    ' If is Export Data MODE then Delete All Data Sheet
    Call DeleteAllDataSheet
    
    ' Export Table
    For Each Table In tableRange.Cells
        ' If Table is Empty then Exit
        If IsEmpty(Table.Value) Or Table.Value = "" Then
            Exit For
        End If
        
        ' Get Conditon WHERE CLAUSE
        Set Condition = Table.Offset(0, 1)
        ' Get Sort ORDER BY CLAUSE
        Set OrderBy = Condition.Offset(0, 1)
        
        Dim sqlStr As String
        
        '''' Create SQL QUERY
        ' Basic SQL
        sqlStr = "SELECT * FROM " & Table.Value
        ' have WHERE Condition
        If IsEmpty(Condition.Value) = False Then
           sqlStr = sqlStr & " WHERE " & Condition.Value
        End If
        ' have ORDER BY Condition
        If IsEmpty(OrderBy.Value) = False Then
           sqlStr = sqlStr & " ORDER BY " & OrderBy.Value
        End If
        
        ' Query
        recordSet.Open sqlStr, connection, adOpenStatic
        ' Write Result Count
        Condition.Offset(0, 1).Offset(0, 1).Value = recordSet.RecordCount
        ' Check Exist Sheet
        If CheckIfSheetExists(Table.Value) Then
            Sheets(Table.Value).Cells.Clear
        Else
            Sheets.Add(, Sheets(Sheets.Count)).Name = Table.Value
        End If
                
        ' Add Link To Table
        TableJP = Table.Offset(0, -6).Value
        Table.Hyperlinks.Add Anchor:=Table, Address:="", SubAddress:=Table.Value & "!A1", TextToDisplay:=TableJP
        
        ' Format Cell As Text
        ' Declare recordSet for get Column Name
        Dim recordSet2 As ADODB.recordSet
        Set recordSet2 = New ADODB.recordSet
        sqlGetColumnName = "select COLUMN_NAME, COMMENTS from ALL_COL_COMMENTS where table_name = '" & Table.Value & "'"
        
        ' EXPORT DICRECTION : Horizontal
        If (direction = "Horizontal") Then
        ' Create Header
        For colHeader = 0 To recordSet.Fields.Count - 1
        Sheets(Table.Value).Cells(1, (colHeader + 1)).Value = recordSet.Fields(colHeader).Name
        Next colHeader
        ' Export Data
        i = 1
        While Not (recordSet.EOF)
            For j = 0 To recordSet.Fields.Count - 1
                Call SetValueWithCellFormat(Sheets(Table.Value).Cells(i + 1, j + 1), recordSet.Fields(j))
            Next j
            recordSet.MoveNext
            i = i + 1
        Wend
        ' EXPORT DICRECTION : Vertical
        Else
            
            ' Create Header
                ' Query for get Columns Name
                recordSet2.Open sqlGetColumnName, connection
            For colHeader = 0 To recordSet.Fields.Count - 1
                ' colHeaderName
                colHeaderName = recordSet.Fields(colHeader).Name
                ' filter by Column Name
                recordSet2.Filter = "COLUMN_NAME='" & colHeaderName & "'"
                ' Setting column Name (Comment)
                Sheets(Table.Value).Cells((colHeader + 1), 1).Value = recordSet2.Fields(1).Value
                ' Setting column Name
                Sheets(Table.Value).Cells((colHeader + 1), 2).Value = recordSet.Fields(colHeader).Name
                
            Next colHeader
            recordSet2.Close
            ' Export Data
            i = 1
            While Not (recordSet.EOF)
                For j = 0 To recordSet.Fields.Count - 1
                    Call SetValueWithCellFormat(Sheets(Table.Value).Cells(j + 1, i + 2), recordSet.Fields(j))
                Next j
                recordSet.MoveNext
                i = i + 1
            Wend
            Debug.Print direction
            
        End If
        ' Set AutoFit Column
        Sheets(Table.Value).Columns("A:Z").AutoFit
NextTable:
    ' Close RecordSet
        recordSet.Close
    Next Table
    
    ' close Connection
    connection.Close
    ' Move to Sheet 1
    Sheets(1).Select
    ' Turn on Screen Update
    Application.ScreenUpdating = True
End Sub

Sub SetValueWithCellFormat(range As range, recordSetField As Object)
    ' Format Data Type
    Select Case recordSetField.Type
        ' 130 : adWChar type ~ Char
        ' 202 : adVarWChar   ~ VarChar2
        Case 130, 202
            ' Format Cell As Text
            range.NumberFormat = "@"
            ' Align Left
            range.HorizontalAlignment = xlLeft
            
        ' 135 : adDBTimeStamp ~ Timestamp
        Case 135
            ' Format : yyyy/mm/dd hh:mm:ss
            range.NumberFormat = "yyyy/mm/dd hh:mm:ss"
            ' Align Left
            range.HorizontalAlignment = xlLeft
        Case Else
            ' Align Left
            range.HorizontalAlignment = xlLeft
        
    End Select
    ' Set Value to Cell
    range = recordSetField.Value
End Sub

Function CheckIfSheetExists(SheetName As String) As Boolean
      CheckIfSheetExists = False
      For Each WS In Worksheets
        If SheetName = WS.Name Then
          CheckIfSheetExists = True
          Exit Function
        End If
      Next WS
End Function


Sub btnDirChoose()
    Worksheets("OracleExport").range("I9").Value = GetFolder()
End Sub

Sub DeleteAllDataSheet()
    'Stopping Application Alerts
    Application.DisplayAlerts = False
    Do While Worksheets.Count > 1
        Worksheets(2).Delete
    Loop
    'Enabling Application alerts once we are done with our task
    Application.DisplayAlerts = True
End Sub

Function GetFolder() As String
    Dim fldr As FileDialog
    Dim sItem As String
    Set fldr = Application.FileDialog(msoFileDialogFolderPicker)
    With fldr
        .Title = "Select a Folder"
        .AllowMultiSelect = False
        .InitialFileName = Application.DefaultFilePath
        If .Show <> -1 Then GoTo NextCode
        sItem = .SelectedItems(1)
    End With
NextCode:
    GetFolder = sItem
    Set fldr = Nothing
End Function
